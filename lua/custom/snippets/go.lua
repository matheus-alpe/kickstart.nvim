local utils = require 'custom.snippets.utils'

return {
  utils.snip('test', {
    utils.text 'func Test',
    utils.insert(1, 'Name'),
    utils.text '(t *testing.T)',
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('tint', {
    utils.text 'type ',
    utils.insert(1, 'Name'),
    utils.text { ' interface {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('tstruc', {
    utils.text 'type ',
    utils.insert(1, 'Name'),
    utils.text { ' struct {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('method', {
    utils.text 'func ',
    utils.text '(',
    utils.insert(1, 's'),
    utils.text ' *',
    utils.insert(2, 'StructName'),
    utils.text ')',
    utils.text ' ',
    utils.insert(3, 'FuncName'),
    utils.text '(',
    utils.insert(4),
    utils.text ')',
    utils.insert(5),
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('func', {
    utils.text 'func ',
    utils.insert(1, 'Name'),
    utils.text '(',
    utils.insert(2),
    utils.text ')',
    utils.insert(3),
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('if', {
    utils.text 'if ',
    utils.insert(1, 'true'),
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('ife', {
    utils.text 'if err != nil',
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0, 'return err'),
    utils.text { '', '}' },
  }),
  utils.snip('fori', {
    utils.text 'for ',
    utils.insert(1, 'i := 0'),
    utils.text '; ',
    utils.insert(2, 'i < 10'),
    utils.text '; ',
    utils.insert(3, 'i++'),
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('forr', {
    utils.text 'for ',
    utils.insert(1, 'k, v'),
    utils.text ' := range ',
    utils.insert(2, 'expr'),
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
  }),
  utils.snip('goa', {
    utils.text 'go func',
    utils.text '(',
    utils.insert(1),
    utils.text ')',
    utils.text { ' {', '' },
    utils.text '\t',
    utils.insert(0),
    utils.text { '', '}' },
    utils.text '(',
    utils.insert(2),
    utils.text ')',
  }),
}
